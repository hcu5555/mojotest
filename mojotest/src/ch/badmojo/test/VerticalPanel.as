/** *	 Copyright 2009 Philipp Laeubli  *	 Licensed under the Apache License, Version 2.0 (the "License");  *	 you may not use this file except in compliance with the License.  *	 You may obtain a copy of the License at  *	  *	 http://www.apache.org/licenses/LICENSE-2.0  *	  *	 Unless required by applicable law or agreed to in writing, software  *	 distributed under the License is distributed on an "AS IS" BASIS,  *	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *	 See the License for the specific language governing permissions and  *	 limitations under the License. */ package ch.badmojo.test {	import flash.events.MouseEvent;		import flash.text.TextField;		import flash.events.Event;		import flash.display.DisplayObject;	import flash.display.Graphics;	import flash.display.Sprite;	import flash.geom.Rectangle;		/**	 * @author phil	 * 	 */	public class VerticalPanel extends Sprite implements Item {		private var _currentHeight : Number = 0;		private var _margin : Number;		private var _currentWidth : Number = 0;		private var _seperators : Array = new Array();		private var _background : uint;		public static var EXPANDITEM : String = "mojoTest-ExpandItem";		private var _expanded : Boolean = true;		private var _label : String;		public function VerticalPanel(margin : Number,  background : uint = 0xFFFFFF, label : String = null) {			_label = label;			_background = background;			_margin = margin;			if(label) {				var text : TextField = new TextField();				text.text = label;				text.height = 20;				text.width = 2 * text.textWidth;				add(text);			}								redraw();		}		public function add(child : DisplayObject) : void {			var childHeight : Number;			var childWidth : Number;			if(child is Item) {				childHeight = Item(child).getContentSize().height;				childWidth = Item(child).getContentSize().width;				child.addEventListener(VerticalPanel.EXPANDITEM, onExpand);			}else {				childHeight = child.height;				childWidth = child.width;			}			child.y = _currentHeight;				this.addChild(child);			_currentHeight += _margin + childHeight;			_currentWidth = _margin + Math.max(_currentWidth, childWidth);			redraw();		}		private function onExpand(event : ExpandEvent) : void {			var currentItem : Item = Item(event.currentTarget);			for (var i : Number = 0;i < numChildren; i++) {				var dsp : DisplayObject = getChildAt(i);				if(dsp is Item) {					if(Item(dsp).isExpanded()) {						Item(dsp).contract();										}					if(dsp == currentItem) {						currentItem.expand();					}				}			}			_currentHeight = 0;			for (var k : Number = 0;k < numChildren; k++) {				var obj : DisplayObject = getChildAt(k);				obj.y = _currentHeight;				var newHeight : Number;						if(obj is Item) {					newHeight = Item(obj).getCurrentHeight();				}else {					newHeight = obj.height;				}				_currentHeight += newHeight;			}			redraw();			var expandEvent : Event = new ExpandEvent(this.toString());			dispatchEvent(expandEvent);		}		public function get currentHeigth() : Number {			return _currentHeight;		}		public function get currentWidth() : Number {			return _currentWidth;		}		public function update() : void {			_currentHeight = 0;			for (var k : Number = 0;k < numChildren; k++) {				var obj : DisplayObject = getChildAt(k);				obj.y = _currentHeight;				var newHeight : Number;						if(obj is Item) {					newHeight = Item(obj).getCurrentHeight();				}else {					newHeight = obj.height;				}				_currentHeight += newHeight;			}			redraw();		}		private function redraw() : void {			for each (var separator : Sprite in _seperators) {				drawLine(separator.graphics);				if(_seperators.indexOf(separator) == _seperators.length - 1) {					separator.visible = false;				}else {					separator.visible = true;				}			}			this.graphics.clear();			this.graphics.beginFill(_background, 0.5);			this.graphics.drawRect(0, 0, this.width, this.height);			this.graphics.endFill();		}		public function seperator() : void {			var seperator : Sprite = new Sprite();			drawLine(seperator.graphics);			_seperators.push(seperator);			add(seperator);		}		private function drawLine(spriteGraphics : Graphics) : void {			spriteGraphics.clear();			spriteGraphics.lineStyle(1, 0xaaaaaa);			spriteGraphics.lineTo(this.currentWidth - 5, 0);			spriteGraphics.lineStyle(0, 0xaaaaaa, 0);			spriteGraphics.beginFill(0x000000, 0);			spriteGraphics.drawRect(0, 0, 2, _margin * 5);			spriteGraphics.endFill();		}		public function getHeader() : DisplayObject {			return getChildAt(0);		}		public function expand() : void {			_expanded = true;			for (var i : Number = 1;i < numChildren; i++) {				getChildAt(i).visible = true;			}			update();		}		public function contract() : void {			for (var i : Number = 1;i < numChildren; i++) {				getChildAt(i).visible = false;			}			update();		}		public function isExpanded() : Boolean {			return _expanded;		}		public function getCurrentHeight() : Number {			return _currentHeight;		}		public function getContentSize() : Rectangle {			var rect : Rectangle = new Rectangle();			var h : Number = 0;			var w : Number = 0;			if(numChildren > 1) {				for (var i : Number = 1;i < numChildren; i++) {					h = Math.max(getChildAt(i).height, h);					w = Math.max(getChildAt(i).width, w);					}				rect.height = h;				rect.width = w;			}			return rect;		}	}}