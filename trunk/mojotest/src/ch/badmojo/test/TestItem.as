/** *	 Copyright 2009 Philipp Laeubli  *	 Licensed under the Apache License, Version 2.0 (the "License");  *	 you may not use this file except in compliance with the License.  *	 You may obtain a copy of the License at  *	  *	 http://www.apache.org/licenses/LICENSE-2.0  *	  *	 Unless required by applicable law or agreed to in writing, software  *	 distributed under the License is distributed on an "AS IS" BASIS,  *	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *	 See the License for the specific language governing permissions and  *	 limitations under the License. */package ch.badmojo.test {	import ch.badmojo.test.Item;		import ch.badmojo.test.ExpandEvent;		import flash.events.Event;		import flash.events.MouseEvent;		import flash.text.TextField;		import flash.display.DisplayObject;	import flash.display.Sprite;			/**	 * @author phil	 */	public class TestItem extends Sprite implements Item {		private var _title : Sprite;		private var _content : VerticalPanel;		public function TestItem(testResult : TestResult) {			var titleText : TextField = new TextField();			titleText.text = testResult.getMethodname() + ": " + testResult.getState().getAsString();										titleText.height = titleText.textHeight + 20;			titleText.width = 2 * titleText.textWidth;						_title = new Sprite();			_title.graphics.beginFill(testResult.getState().getColor(), 1);			_title.graphics.drawRect(0, 0, 20, 20);			_title.graphics.endFill();			_title.addChild(titleText);			addChild(_title);			titleText.x = 30;			_content = new VerticalPanel(2);						_content.y = _title.height + 10;			_content.visible = false;			addChild(_content);						var messages : Vector.<TestMessage> = testResult.getMessages();			for each (var res : TestMessage in messages) {				var assertText : TextField = new TextField();				assertText.text = res.getMessage();				if(res.isSuccessful()) {					assertText.textColor = TestResultState.SUCCESS.getColor();				}else {					assertText.textColor = TestResultState.FAILED.getColor();				}				assertText.height = assertText.textHeight + 5;				assertText.width = 2 * assertText.textWidth;				_content.add(assertText);			}			_title.addEventListener(MouseEvent.CLICK, listener);		}		private function listener(event : MouseEvent) : void {			var expandEvent : Event = new ExpandEvent(this.toString());			dispatchEvent(expandEvent);		}		public function getHeader() : DisplayObject {			return _title; 		}		public function getContent() : DisplayObject {			return _content;		}		public function expand() : void {			_content.visible = true;		}		public function contract() : void {			_content.visible = false;		}		public function isExpanded() : Boolean {			return _content.visible;		}		public function getCurrentHeight() : Number {			if(_content.visible) {				return this.height;			}else {				return _title.height;			}		}	}}