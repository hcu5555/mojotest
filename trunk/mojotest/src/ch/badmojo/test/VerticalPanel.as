/** *		Bachelor of Arts in Design - Interaction Design, 3. Semester *		IAD, Interaction Design, Zurich University of the Arts * 		Copyright (c) 2008 Philipp Laeubli, All Rights Reserved. */package ch.badmojo.test {	import flash.display.DisplayObject;	import flash.display.Graphics;	import flash.display.Sprite;	/**	 * @author phil	 * 	 */	public class VerticalPanel extends Sprite {		private var _currentHeight : Number = 0;		private var _margin : Number;		private var _currentWidth : Number = 0;		private var _seperators : Array = new Array();		private var _background : uint;		public static var EXPANDITEM : String = "mojoTest-ExpandItem";		public function VerticalPanel(margin : Number,  background : uint = 0xFFFFFF) {			_background = background;			_margin = margin;			redraw();		}		public function add(child : DisplayObject) : void {			var childHeight : Number;			var childWidth : Number;			if(child is Item) {				childHeight = Item(child).getContent().height;				childWidth = Item(child).getContent().width;				child.addEventListener(VerticalPanel.EXPANDITEM, onExpand);			}else {				childHeight = child.height;				childWidth = child.width;			}			child.y = _currentHeight;				this.addChild(child);			_currentHeight += _margin + childHeight;			_currentWidth = _margin + Math.max(_currentWidth, childWidth);			redraw();		}		private function onExpand(event : ExpandEvent) : void {			var currentItem : Item = Item(event.currentTarget);			for (var i : Number = 0;i < numChildren; i++) {				var dsp : DisplayObject = getChildAt(i);				if(dsp is Item) {					if(Item(dsp).isExpanded()) {						Item(dsp).contract();										}					if(dsp == currentItem) {						currentItem.expand();					}				}			}			_currentHeight = 0;			for (var k : Number = 0;k < numChildren; k++) {				var obj : DisplayObject = getChildAt(k);					obj.y = _currentHeight;					var newHeight : Number;							if(obj is Item) {						newHeight = Item(obj).getCurrentHeight()					}else {						newHeight = obj.height;					}					_currentHeight += newHeight;			}					redraw();		}		public function get currentHeigth() : Number {			return _currentHeight;		}		public function get currentWidth() : Number {				return _currentWidth;		}		public function update() : void {			_currentHeight = 0;			for (var k : Number = 0;k < numChildren; k++) {				var obj : DisplayObject = getChildAt(k);				obj.y = _currentHeight;				var newHeight : Number;						if(obj is Item) {					newHeight = Item(obj).getCurrentHeight();				}else {					newHeight = obj.height;				}				_currentHeight += newHeight;			}			redraw();		}		private function redraw() : void {			for each (var separator : Sprite in _seperators) {				drawLine(separator.graphics);				if(_seperators.indexOf(separator) == _seperators.length - 1) {					separator.visible = false;				}else {					separator.visible = true;				}			}			this.graphics.clear();			this.graphics.beginFill(_background, 0.5);			this.graphics.drawRect(0, 0, this.width, this.height);			this.graphics.endFill();		}		public function seperator() : void {			var seperator : Sprite = new Sprite();			drawLine(seperator.graphics);			_seperators.push(seperator);			add(seperator);		}		private function drawLine(spriteGraphics : Graphics) : void {			spriteGraphics.clear();			spriteGraphics.lineStyle(1, 0xaaaaaa);			spriteGraphics.lineTo(this.currentWidth - 5, 0);			spriteGraphics.lineStyle(0, 0xaaaaaa, 0);			spriteGraphics.beginFill(0x000000, 0);			spriteGraphics.drawRect(0, 0, 2, _margin * 5);			spriteGraphics.endFill();		}	}}