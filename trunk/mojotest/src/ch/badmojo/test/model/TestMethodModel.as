/** *	 Copyright 2009 Philipp Laeubli  *	 Licensed under the Apache License, Version 2.0 (the "License");  *	 you may not use this file except in compliance with the License.  *	 You may obtain a copy of the License at  *	  *	 http://www.apache.org/licenses/LICENSE-2.0  *	  *	 Unless required by applicable law or agreed to in writing, software  *	 distributed under the License is distributed on an "AS IS" BASIS,  *	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *	 See the License for the specific language governing permissions and  *	 limitations under the License. */package ch.badmojo.test.model {	import ch.badmojo.test.model.Model;			/**	 * @author phil	 */	public class TestMethodModel extends Model {		public static const TESTNAME : String = "METHODNAME";		public static const TESTSTATE : String = "TESTSTATE";		public static const ASSERTS : String = "ASSERTS";		public function TestMethodModel(testName : String) {			setTestName(testName);			setState(TestResultState.SUCCESS);			setProperty(ASSERTS, new Vector.<TestAssertModel>());		}		public function setState(state : TestResultState) : void {			setProperty(TESTSTATE, state);		}		public function setTestName(testName : String) : void {			setProperty(TESTNAME, testName);		}		public function setError(errorMessage : String) : void {			var assert : TestAssertModel = new 	TestAssertModel(errorMessage, TestResultState.ERROR);			register(assert);			getAsserts().push(assert);			setState(TestResultState.ERROR);		}		private function register(assert : TestAssertModel) : void {			assert.setParent(this);		}		public function getAsserts() : Vector.<TestAssertModel> {			return Vector.<TestAssertModel>(getProperty(ASSERTS));		}		public function setFailed(reason : String, stack : String = null) : void {			var assert : TestAssertModel = new TestAssertModel(reason, TestResultState.FAILED, stack);			register(assert);			getAsserts().push(assert);			setState(TestResultState.FAILED);		}		public function getState() : TestResultState {			return TestResultState(getProperty(TESTSTATE));		}		public function getMethodname() : String {			return String(getProperty(TESTNAME));		}		public function mouseOver() : void {			update(MOUSE_OVER);		}		public function mouseOut() : void {			update(MOUSE_OUT);		}		public function assertSuccess(message : String, stack : String = null) : void {			var assert : TestAssertModel = new TestAssertModel(message, TestResultState.SUCCESS, stack);			register(assert);			getAsserts().push(assert);		}	}}